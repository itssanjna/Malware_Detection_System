import os
import tempfile
from django.http import JsonResponse
from django.shortcuts import render, redirect
from django.views.decorators.csrf import csrf_exempt
from .clamav import scan_file_with_clamav
from django.contrib import messages
from django.contrib.auth import authenticate, login
from .forms import RegisterForm, LoginForm
from .models import User

def home(request):
    return render(request, 'upload.html')


def register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = User(username=username)
            user.set_password(password)
            user.save()
            messages.success(request, 'Account created successfully!')
            return redirect('login')
    else:
        form = RegisterForm()
    return render(request, 'register.html', {'form': form})

def user_login(request):
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('home')
            else:
                messages.error(request, 'Invalid credentials.')
    else:
        form = LoginForm()
    return render(request, 'login.html', {'form': form})


# @csrf_exempt
def scan_file(request):
    if request.method == 'POST':
        uploaded_file = request.FILES['file']
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            for chunk in uploaded_file.chunks():
                temp_file.write(chunk)
            temp_file.close()

            result = scan_file_with_clamav(temp_file.name)
            os.unlink(temp_file.name)

            if result['status'] == 'clean':
                message = 'File is clean.'
            else:
                message = f'Malware detected: {result["malware_name"]}.'

            return JsonResponse({'message': message})
    else:
        return JsonResponse({'error': 'Invalid request method'})
    



